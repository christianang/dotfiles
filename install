#!/bin/bash -eu

function clone_or_pull() {
  local repo="${1}"
  local location="${2}"
  if [[ -d "${location}" ]]; then
    echo "Pulling ${location}..."
    git -C "${location}" pull
  else
    git clone "${repo}" "${location}"
  fi
}

function install_aur_package() {
  local package="${1}"
  clone_or_pull "https://aur.archlinux.org/${package}.git" "${HOME}/aur/${package}"
  pushd "${HOME}/aur/${package}" > /dev/null
    makepkg -si --noconfirm
  popd > /dev/null
}

function install_aur_packages() {
  local file="${1}"
  for package in $(cat ${file} | grep -v '#');
  do
    install_aur_package ${package}
  done
}

function clone_or_pull_repos() {
  local file="${1}"
  while IFS=, read repo destination; do
    clone_or_pull "${repo}" "${HOME}/${destination}"
  done < ${file}
}

function update_nvim() {
  nvim +PlugInstall +PlugUpdate +PlugUpgrade +qall --headless
}

function arch_install() {
  echo "Installing on Arch..."
  sudo pacman -Sy --noconfirm $(cat config/arch/packages)
  install_aur_packages "config/arch/aur-packages"
}

function ubuntu_install() {
  echo "Installing on Ubuntu..."
  sudo apt update
  sudo apt install -y $(cat config/ubuntu/packages)
}

function main() {
  local os_name="$(cat /etc/os-release | grep '^NAME' | cut -d'"' -f2)"
  case "${os_name}" in
    "Ubuntu")
      ubuntu_install
      ;;
    "Arch Linux")
      arch_install
      ;;
    *)
      echo "Unsupported OS ${os_name}"
      ;;
  esac

  clone_or_pull_repos "config/repos"

  "${HOME}/.gem/ruby/2.7.0/bin/homesick" clone https://github.com/christianang/dotfiles.git
  "${HOME}/.gem/ruby/2.7.0/bin/homesick" link dotfiles

  update_nvim
}

main
